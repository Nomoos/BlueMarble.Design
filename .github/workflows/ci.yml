name: CI - Documentation and Content Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  validate-documentation:
    name: Validate Documentation
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      shell: bash
      run: |
        npm install -g markdownlint-cli
        
    - name: Validate markdown files
      shell: bash
      run: |
        # Cross-platform markdown file discovery and validation
        
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        # Create a temporary Python script for markdown validation
        cat > /tmp/validate_md.py << 'EOF'
import os
import glob
import subprocess
import sys

# Find markdown files cross-platform
md_files = []
for pattern in ['**/*.md', './*.md']:
    md_files.extend(glob.glob(pattern, recursive=True))

# Filter out node_modules and .git
md_files = [f for f in md_files if '.git' not in f and 'node_modules' not in f]

print(f'Found {len(md_files)} markdown files')

if md_files:
    # Try to run markdownlint
    try:
        cmd = ['markdownlint', '--config', '.markdownlint.json'] + md_files
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode != 0:
            print('Markdown linting issues found:')
            print(result.stdout)
            print(result.stderr)
        else:
            print('✓ All markdown files passed linting')
    except FileNotFoundError:
        print('Warning: markdownlint not found, skipping linting')
        # Basic validation - check if files are readable
        for md_file in md_files[:5]:  # Check first 5 files
            try:
                with open(md_file, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                    if content.strip():
                        print(f'✓ {md_file} is readable')
                    else:
                        print(f'Warning: {md_file} appears to be empty')
            except Exception as e:
                print(f'Error reading {md_file}: {e}')
else:
    print('No markdown files found')
EOF
        
        # Run the Python script
        $python_cmd /tmp/validate_md.py
        
    - name: Check file structure
      shell: bash
      run: |
        echo "Checking repository structure..."
        # Cross-platform directory and file checking
        for dir in docs templates; do
          if [ ! -d "$dir" ]; then
            echo "Warning: $dir directory not found"
          else
            echo "Found directory: $dir"
          fi
        done
        
        if [ ! -f "README.md" ]; then
          echo "Error: README.md not found"
          exit 1
        else
          echo "Found README.md"
        fi
        echo "Repository structure validation completed"
        
    - name: Validate issue templates
      shell: bash
      run: |
        echo "Validating issue templates..."
        
        # Use Python for cross-platform template validation
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        cat > /tmp/validate_templates.py << 'EOF'
import os
import yaml
import glob

if os.path.exists('.github/ISSUE_TEMPLATE'):
    templates = glob.glob('.github/ISSUE_TEMPLATE/*.yml')
    for template in templates:
        print(f'Found template: {template}')
        try:
            with open(template, 'r', encoding='utf-8') as f:
                yaml.safe_load(f)
            print(f'✓ Valid YAML: {template}')
        except Exception as e:
            print(f'Warning: YAML syntax issue in {template}: {e}')
else:
    print('No issue templates directory found')
EOF
        
        $python_cmd /tmp/validate_templates.py
        echo "Issue template validation completed"