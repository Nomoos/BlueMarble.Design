name: PR Auto-Merge from Main

on:
  # Run on a schedule to check for outdated PRs
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  # Run when main branch is updated
  push:
    branches: [ main ]
  # Allow manual trigger
  workflow_dispatch:
  # Run when PR is opened or synchronized
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  auto-merge-main:
    name: Auto-Merge Main into Outdated PRs
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      shell: bash
      run: |
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        # Install required dependencies
        $python_cmd -m pip install --quiet PyGithub requests
        
    - name: Detect and merge outdated PRs
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          python_cmd="python"
        fi
        
        $python_cmd << 'PYTHON_SCRIPT'
        import os
        import sys
        import json
        from github import Github
        from datetime import datetime
        
        # Initialize GitHub client
        token = os.environ.get('GITHUB_TOKEN')
        repo_name = os.environ.get('GITHUB_REPOSITORY')
        
        if not token or not repo_name:
            print("Error: GITHUB_TOKEN or GITHUB_REPOSITORY not set")
            sys.exit(1)
        
        g = Github(token)
        repo = g.get_repo(repo_name)
        
        print(f"üîç Checking for outdated pull requests in {repo_name}...")
        print(f"‚è∞ Current time: {datetime.now().isoformat()}")
        print("")
        
        # Get all open PRs targeting main
        open_prs = repo.get_pulls(state='open', base='main', sort='updated', direction='desc')
        
        processed_count = 0
        outdated_count = 0
        merged_count = 0
        conflict_count = 0
        
        for pr in open_prs:
            processed_count += 1
            
            # Skip draft PRs
            if pr.draft:
                print(f"‚è≠Ô∏è  PR #{pr.number}: Skipping draft PR '{pr.title}'")
                continue
            
            # Check if PR is mergeable and not behind
            print(f"üîé PR #{pr.number}: '{pr.title}'")
            print(f"   Status: mergeable={pr.mergeable}, mergeable_state={pr.mergeable_state}")
            
            # Check if PR is behind the base branch
            comparison = repo.compare(pr.base.sha, pr.head.sha)
            commits_behind = comparison.behind_by
            
            if commits_behind > 0:
                outdated_count += 1
                print(f"   ‚ö†Ô∏è  PR is {commits_behind} commit(s) behind main")
                
                # Attempt to update the branch
                try:
                    # Use GitHub API to update the branch (merge main into PR branch)
                    # This is equivalent to clicking "Update branch" button in GitHub UI
                    update_url = f"https://api.github.com/repos/{repo_name}/pulls/{pr.number}/update-branch"
                    
                    import requests
                    headers = {
                        'Authorization': f'token {token}',
                        'Accept': 'application/vnd.github.v3+json'
                    }
                    
                    response = requests.put(update_url, headers=headers)
                    
                    if response.status_code == 202:
                        merged_count += 1
                        print(f"   ‚úÖ Successfully initiated merge of main into PR #{pr.number}")
                        
                        # Add a comment to notify the author
                        comment_body = f"""ü§ñ **Automated PR Update**
        
        This PR was behind the `main` branch by {commits_behind} commit(s). 
        
        I've automatically merged the latest changes from `main` into this PR branch to keep it up-to-date.
        
        **Next Steps:**
        - ‚úÖ Review the changes to ensure compatibility
        - ‚úÖ Check that all tests pass
        - ‚úÖ Resolve any merge conflicts if they appear
        
        If you encounter any issues, please review the merge commit and reach out to the team.
        
        _Generated by PR Auto-Merge automation at {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}_"""
                        
                        pr.create_issue_comment(comment_body)
                        print(f"   üí¨ Posted notification comment to PR #{pr.number}")
                        
                    elif response.status_code == 422:
                        # Branch cannot be updated (likely has conflicts)
                        conflict_count += 1
                        print(f"   ‚ö†Ô∏è  Cannot auto-merge: conflicts detected")
                        
                        # Post a comment with conflict notification
                        conflict_comment = f"""ü§ñ **PR Update Required - Manual Intervention Needed**
        
        This PR is behind the `main` branch by {commits_behind} commit(s), but automatic merging failed due to conflicts.
        
        **Action Required:**
        Please manually merge `main` into your branch or resolve conflicts:
        
        \`\`\`bash
        git fetch origin
        git checkout {pr.head.ref}
        git merge origin/main
        # Resolve any conflicts
        git push
        \`\`\`
        
        **GitHub Copilot Assistance:**
        You can use GitHub Copilot in your IDE to help resolve merge conflicts:
        1. Open the conflicted files
        2. Use Copilot to suggest conflict resolutions
        3. Review and accept the suggestions
        
        **Need Help?**
        - Review the [Contributing Guidelines](CONTRIBUTING.md)
        - Ask the team in the PR discussion
        - Tag @Nomoos for assistance
        
        _Generated by PR Auto-Merge automation at {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}_"""
                        
                        pr.create_issue_comment(conflict_comment)
                        print(f"   üí¨ Posted conflict notification to PR #{pr.number}")
                        
                    else:
                        print(f"   ‚ùå Failed to update branch: HTTP {response.status_code}")
                        print(f"   Response: {response.text}")
                        
                except Exception as e:
                    print(f"   ‚ùå Error updating PR #{pr.number}: {str(e)}")
                    
            else:
                print(f"   ‚úÖ PR is up-to-date with main")
            
            print("")
        
        # Summary
        print("=" * 60)
        print("üìä Auto-Merge Summary:")
        print(f"   Total PRs processed: {processed_count}")
        print(f"   Outdated PRs found: {outdated_count}")
        print(f"   Successfully merged: {merged_count}")
        print(f"   Conflicts requiring manual resolution: {conflict_count}")
        print("=" * 60)
        
        # Create a summary for GitHub Actions
        summary = f"""## PR Auto-Merge Summary
        
        - üîç **Total PRs processed:** {processed_count}
        - ‚ö†Ô∏è  **Outdated PRs found:** {outdated_count}
        - ‚úÖ **Successfully merged:** {merged_count}
        - ‚ö†Ô∏è  **Conflicts requiring manual resolution:** {conflict_count}
        
        _Workflow completed at {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}_
        """
        
        # Write to GitHub Actions summary if available
        if 'GITHUB_STEP_SUMMARY' in os.environ:
            with open(os.environ['GITHUB_STEP_SUMMARY'], 'a') as f:
                f.write(summary)
        
        PYTHON_SCRIPT
        
    - name: Report completion
      if: always()
      shell: bash
      run: |
        echo "‚úÖ PR auto-merge workflow completed"
        echo "Check the logs above for detailed information"
