name: Design Assets Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'design/**'
      - 'docs/**'
      - 'templates/**'
      - 'assets/**'
      - 'roadmap/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'design/**'
      - 'docs/**'
      - 'templates/**'
      - 'assets/**'
      - 'roadmap/**'
  workflow_dispatch:

jobs:
  validate-design-structure:
    name: Validate Design Structure
    runs-on: self-hosted
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Validate directory structure
      shell: bash
      run: |
        echo "Validating design repository structure..."
        
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        echo "Checking directory structure..."
        $python_cmd -c "import os,glob; required=['design','docs','templates','assets','roadmap']; [print(f'✓ Found directory: {d}') if os.path.exists(d) else print(f'Warning: {d} not found') for d in required]; print(f'✓ Found docs/README.md') if os.path.exists('docs/README.md') else print('Warning: docs/README.md not found'); print(f'✓ Found design/README.md') if os.path.exists('design/README.md') else print('Warning: design/README.md not found'); template_count=len(glob.glob('templates/**/*.md',recursive=True)) if os.path.exists('templates') else 0; print(f'Found {template_count} template files')"
        echo "Design structure validation completed"
        
    - name: Check for broken links in documentation
      shell: bash
      run: |
        echo "Checking for broken internal links..."
        
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        echo "Checking links with Python..."
        $python_cmd -c "import os,re,glob; link_pattern=re.compile(r'\[.*?\]\(([^)]*\.md)\)'); md_files=glob.glob('design/**/*.md',recursive=True)+glob.glob('docs/**/*.md',recursive=True)+glob.glob('*.md'); broken_links=[]; [broken_links.extend([(md_file,match.group(1)) for match in link_pattern.finditer(open(md_file,'r',encoding='utf-8',errors='ignore').read()) if not match.group(1).startswith('http') and not os.path.exists(os.path.normpath(os.path.join(os.path.dirname(md_file),match.group(1).lstrip('./'))))]) for md_file in md_files if os.path.isfile(md_file)]; [print(f'Warning: Broken link in {f}: {l}') for f,l in broken_links]; print('No broken links found') if not broken_links else None"
        echo "Link validation completed"
        
    - name: Validate file naming conventions
      shell: bash
      run: |
        echo "Checking file naming conventions..."
        
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        echo "Checking naming conventions..."
        $python_cmd -c "import os,glob; files_with_spaces=[os.path.join(root,file) for root,dirs,files in os.walk('.') if '.git' not in root for file in files if ' ' in file]; [print(f'Warning: File with spaces: {f}') for f in files_with_spaces]; md_uppercase=[f for pattern in ['docs/**/*.md','templates/**/*.md','*.md'] for f in glob.glob(pattern,recursive=True) if any(c.isupper() for c in os.path.basename(f))]; [print(f'Info: Consider lowercase: {f}') for f in md_uppercase]; print('✓ File naming conventions look good') if not files_with_spaces and not md_uppercase else None"
        echo "File naming validation completed"