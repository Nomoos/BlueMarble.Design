name: Design Assets Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'templates/**'
      - 'assets/**'
      - 'roadmap/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'templates/**'
      - 'assets/**'
      - 'roadmap/**'
  workflow_dispatch:

jobs:
  validate-design-structure:
    name: Validate Design Structure
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate directory structure
      shell: bash
      run: |
        echo "Validating design repository structure..."
        
        # Check required directories exist
        required_dirs=("docs" "templates" "assets" "roadmap")
        for dir in "${required_dirs[@]}"; do
          if [ ! -d "$dir" ]; then
            echo "Warning: Required directory '$dir' not found"
          else
            echo "✓ Found directory: $dir"
          fi
        done
        
        # Check for core documentation files
        echo "Checking for core documentation files..."
        if [ -f "docs/README.md" ]; then
          echo "✓ Found docs/README.md"
        else
          echo "Warning: docs/README.md not found"
        fi
        
        # Validate template files
        if [ -d "templates" ]; then
          echo "Checking template files..."
          if command -v find >/dev/null 2>&1; then
            template_count=$(find templates -name "*.md" | wc -l)
          else
            # Windows compatible count using Python
            template_count=$(python3 -c "
import os
import glob
count = len(glob.glob('templates/**/*.md', recursive=True))
print(count)
")
          fi
          echo "Found $template_count template files"
        fi
        
        echo "Design structure validation completed"
        
    - name: Check for broken links in documentation
      shell: bash
      run: |
        echo "Checking for broken internal links..."
        
        # Cross-platform link checking using Python for better compatibility
        python3 -c "
import os
import re
import glob

def check_links_in_docs():
    link_pattern = re.compile(r'\[.*?\]\(([^)]*\.md)\)')
    
    for md_file in glob.glob('docs/**/*.md', recursive=True):
        if os.path.isfile(md_file):
            print(f'Checking links in: {md_file}')
            try:
                with open(md_file, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                    
                for match in link_pattern.finditer(content):
                    link = match.group(1)
                    if not link.startswith('http'):
                        # Convert relative path to absolute path
                        if link.startswith('./'):
                            link = link[2:]
                        
                        # Calculate the target file path
                        base_dir = os.path.dirname(md_file)
                        target_path = os.path.normpath(os.path.join(base_dir, link))
                        
                        if not os.path.exists(target_path):
                            print(f'Warning: Potentially broken link in {md_file}: {link}')
            except Exception as e:
                print(f'Error reading {md_file}: {e}')

check_links_in_docs()
"
        
        echo "Link validation completed"
        
    - name: Validate file naming conventions
      shell: bash
      run: |
        echo "Checking file naming conventions..."
        
        # Use Python for cross-platform file name validation
        python3 -c "
import os
import glob

def check_naming_conventions():
    # Check for files with spaces in names (should use hyphens)
    files_with_spaces = []
    for root, dirs, files in os.walk('.'):
        # Skip .git directory
        if '.git' in root:
            continue
        for file in files:
            if ' ' in file:
                files_with_spaces.append(os.path.join(root, file))
    
    for file in files_with_spaces:
        print(f'Warning: File with spaces in name: {file}')
    
    # Check for uppercase in markdown files (should be lowercase)
    md_files_with_uppercase = []
    for pattern in ['docs/**/*.md', 'templates/**/*.md']:
        for file in glob.glob(pattern, recursive=True):
            basename = os.path.basename(file)
            if any(c.isupper() for c in basename):
                md_files_with_uppercase.append(file)
    
    for file in md_files_with_uppercase:
        print(f'Info: Consider using lowercase for consistency: {file}')

check_naming_conventions()
"
        
        echo "File naming validation completed"