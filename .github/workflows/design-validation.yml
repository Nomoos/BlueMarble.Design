name: Design Assets Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'design/**'
      - 'docs/**'
      - 'templates/**'
      - 'assets/**'
      - 'roadmap/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'design/**'
      - 'docs/**'
      - 'templates/**'
      - 'assets/**'
      - 'roadmap/**'
  workflow_dispatch:

jobs:
  validate-design-structure:
    name: Validate Design Structure
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate directory structure
      shell: bash
      run: |
        echo "Validating design repository structure..."
        
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        echo "Checking directory structure..."
        $python_cmd -c "import os,glob; required=['design','docs','templates','assets','roadmap']; [print(f'✓ Found directory: {d}') if os.path.exists(d) else print(f'Warning: {d} not found') for d in required]; print(f'✓ Found docs/README.md') if os.path.exists('docs/README.md') else print('Warning: docs/README.md not found'); print(f'✓ Found design/README.md') if os.path.exists('design/README.md') else print('Warning: design/README.md not found'); template_count=len(glob.glob('templates/**/*.md',recursive=True)) if os.path.exists('templates') else 0; print(f'Found {template_count} template files')"
        echo "Design structure validation completed"
        
    - name: Check for broken links in documentation
      shell: bash
      run: |
        echo "Checking for broken internal links..."
        set -e  # Exit on error
        
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        echo "Checking links with Python..."
        $python_cmd << 'EOF'
import os
import re
import glob

link_pattern = re.compile(r'\[.*?\]\(([^)]*\.md)\)')
md_files = glob.glob('design/**/*.md', recursive=True) + \
           glob.glob('docs/**/*.md', recursive=True) + \
           glob.glob('*.md')

broken_links = []
checked_count = 0

for md_file in md_files:
    if not os.path.isfile(md_file):
        continue
    
    checked_count += 1
    try:
        with open(md_file, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
            
        for match in link_pattern.finditer(content):
            link = match.group(1)
            
            # Skip external links
            if link.startswith('http'):
                continue
            
            # Resolve relative path
            link_path = os.path.normpath(os.path.join(os.path.dirname(md_file), link.lstrip('./')))
            
            if not os.path.exists(link_path):
                broken_links.append((md_file, link))
    except Exception as e:
        print(f'Warning: Could not read {md_file}: {e}')

if broken_links:
    print(f'\n⚠ Found {len(broken_links)} broken link(s):')
    for file, link in broken_links[:10]:  # Show first 10
        print(f'  {file} -> {link}')
    if len(broken_links) > 10:
        print(f'  ... and {len(broken_links) - 10} more')
else:
    print(f'✓ No broken links found in {checked_count} markdown files')
EOF
        
        echo "✓ Link validation completed"
        
    - name: Validate file naming conventions
      shell: bash
      run: |
        echo "Checking file naming conventions..."
        set -e  # Exit on error
        
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        echo "Checking naming conventions..."
        $python_cmd << 'EOF'
import os
import glob

# Check for files with spaces in name
files_with_spaces = []
for root, dirs, files in os.walk('.'):
    if '.git' in root:
        continue
    for file in files:
        if ' ' in file:
            files_with_spaces.append(os.path.join(root, file))

if files_with_spaces:
    print('⚠ Files with spaces found:')
    for f in files_with_spaces[:10]:
        print(f'  {f}')
    if len(files_with_spaces) > 10:
        print(f'  ... and {len(files_with_spaces) - 10} more')
else:
    print('✓ No files with spaces in names')

# Check for markdown files with uppercase letters
md_patterns = ['docs/**/*.md', 'templates/**/*.md', '*.md']
md_uppercase = []
for pattern in md_patterns:
    for f in glob.glob(pattern, recursive=True):
        basename = os.path.basename(f)
        if any(c.isupper() for c in basename):
            md_uppercase.append(f)

if md_uppercase:
    print('\nℹ Markdown files with uppercase letters (consider lowercase):')
    for f in md_uppercase[:10]:
        print(f'  {f}')
    if len(md_uppercase) > 10:
        print(f'  ... and {len(md_uppercase) - 10} more')
else:
    print('✓ All markdown files use lowercase naming')

if not files_with_spaces and not md_uppercase:
    print('\n✓ File naming conventions look good')
EOF
        
        echo "✓ File naming validation completed"