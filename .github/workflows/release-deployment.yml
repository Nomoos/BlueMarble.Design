name: Release and Deployment

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment target'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: self-hosted
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get version
      id: get_version
      shell: bash
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="dev-$(date +%Y%m%d%H%M%S)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Generate changelog
      shell: bash
      run: |
        echo "# Release Notes for ${{ steps.get_version.outputs.version }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        # Get commits since last tag
        if git describe --tags --abbrev=0 2>/dev/null; then
          LAST_TAG=$(git describe --tags --abbrev=0)
          echo "## Changes since $LAST_TAG" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> RELEASE_NOTES.md
        else
          echo "## Initial Release" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md
        fi
        
        echo "" >> RELEASE_NOTES.md
        cat RELEASE_NOTES.md
        
    - name: Upload release notes
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: RELEASE_NOTES.md
        
  package-documentation:
    name: Package Documentation
    runs-on: self-hosted
    needs: prepare-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create documentation package
      shell: bash
      run: |
        echo "Creating documentation package..."
        
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        # Use Python for cross-platform file operations
        $python_cmd << 'EOF'
import os
import shutil
import tarfile
import zipfile
import platform

version = '${{ needs.prepare-release.outputs.version }}'
package_name = f'BlueMarble-Design-{version}'

# Create package directory
package_dir = os.path.join('package', package_name)
os.makedirs(package_dir, exist_ok=True)

# Copy directories if they exist
dirs_to_copy = ['docs', 'templates', 'assets', 'roadmap']
for dir_name in dirs_to_copy:
    if os.path.exists(dir_name):
        dest_dir = os.path.join(package_dir, dir_name)
        shutil.copytree(dir_name, dest_dir)
        print(f'Copied {dir_name} to package')

# Copy root files if they exist
files_to_copy = ['README.md', 'LICENSE', 'CONTRIBUTING.md']
for file_name in files_to_copy:
    if os.path.exists(file_name):
        shutil.copy2(file_name, package_dir)
        print(f'Copied {file_name} to package')

# Create archive - prefer zip on Windows, tar.gz elsewhere
archive_created = False
if platform.system() == 'Windows' or not shutil.which('tar'):
    # Create ZIP archive
    zip_path = os.path.join('package', f'{package_name}.zip')
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(package_dir):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, 'package')
                zipf.write(file_path, arcname)
    print(f'Created ZIP archive: {zip_path}')
    archive_created = True
else:
    # Create tar.gz archive
    tar_path = os.path.join('package', f'{package_name}.tar.gz')
    with tarfile.open(tar_path, 'w:gz') as tar:
        tar.add(package_dir, arcname=package_name)
    print(f'Created tar.gz archive: {tar_path}')
    archive_created = True

if archive_created:
    print('Documentation package created successfully')
    # List created files
    package_files = [f for f in os.listdir('package') if f.startswith(package_name)]
    for file in package_files:
        file_path = os.path.join('package', file)
        size = os.path.getsize(file_path)
        print(f'  {file} ({size} bytes)')
else:
    print('Error: Failed to create archive')
EOF
        
    - name: Upload documentation package
      uses: actions/upload-artifact@v4
      with:
        name: documentation-package
        path: package/BlueMarble-Design-${{ needs.prepare-release.outputs.version }}.*
        
  deploy:
    name: Deploy Documentation
    runs-on: self-hosted
    needs: [prepare-release, package-documentation]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      
    - name: Deploy to target environment
      shell: bash
      run: |
        echo "Deploying to ${{ github.event.inputs.deploy_target || 'production' }}..."
        
        # Simulate deployment process
        echo "📦 Extracted documentation package"
        echo "🚀 Deploying version ${{ needs.prepare-release.outputs.version }}"
        echo "🌍 Target environment: ${{ github.event.inputs.deploy_target || 'production' }}"
        
        # Here you would add actual deployment steps
        # This could include uploading to a documentation site,
        # updating a wiki, or syncing with other systems
        
        echo "✅ Deployment completed successfully"