name: Release and Deployment

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment target'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: self-hosted
    timeout-minutes: 30
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: Get version
      id: get_version
      shell: bash
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="dev-$(date +%Y%m%d%H%M%S)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Generate changelog
      shell: bash
      run: |
        echo "# Release Notes for ${{ steps.get_version.outputs.version }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        # Get commits since last tag
        if git describe --tags --abbrev=0 2>/dev/null; then
          LAST_TAG=$(git describe --tags --abbrev=0)
          echo "## Changes since $LAST_TAG" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> RELEASE_NOTES.md
        else
          echo "## Initial Release" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md
        fi
        
        echo "" >> RELEASE_NOTES.md
        cat RELEASE_NOTES.md
        
    - name: Upload release notes
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: RELEASE_NOTES.md
        
  package-documentation:
    name: Package Documentation
    runs-on: self-hosted
    timeout-minutes: 30
    needs: prepare-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Create documentation package
      shell: bash
      run: |
        echo "Creating documentation package..."
        
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        # Create package directory
        version="${{ needs.prepare-release.outputs.version }}"
        package_name="BlueMarble-Design-$version"
        mkdir -p "package/$package_name"
        
        # Copy files using shell commands for simplicity
        for dir in docs templates assets roadmap; do
          if [ -d "$dir" ]; then
            cp -r "$dir" "package/$package_name/"
            echo "Copied $dir to package"
          fi
        done
        
        for file in README.md LICENSE CONTRIBUTING.md; do
          if [ -f "$file" ]; then
            cp "$file" "package/$package_name/"
            echo "Copied $file to package"
          fi
        done
        
        # Create archive using cross-platform approach
        cd package
        if command -v tar >/dev/null 2>&1; then
          tar -czf "$package_name.tar.gz" "$package_name"
          echo "Created tar.gz archive"
        else
          $python_cmd -c "import zipfile,os; z=zipfile.ZipFile('$package_name.zip','w',zipfile.ZIP_DEFLATED); [z.write(os.path.join(root,file),os.path.relpath(os.path.join(root,file),'.')) for root,dirs,files in os.walk('$package_name') for file in files]; z.close(); print('Created ZIP archive')"
        fi
        
        # List created files
        ls -la "$package_name".* 2>/dev/null || echo "Archive created"
        
    - name: Upload documentation package
      uses: actions/upload-artifact@v4
      with:
        name: documentation-package
        path: package/BlueMarble-Design-${{ needs.prepare-release.outputs.version }}.*
        
  deploy:
    name: Deploy Documentation
    runs-on: self-hosted
    timeout-minutes: 30
    needs: [prepare-release, package-documentation]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v5
      
    - name: Deploy to target environment
      shell: bash
      run: |
        echo "Deploying to ${{ github.event.inputs.deploy_target || 'production' }}..."
        
        # Simulate deployment process
        echo "📦 Extracted documentation package"
        echo "🚀 Deploying version ${{ needs.prepare-release.outputs.version }}"
        echo "🌍 Target environment: ${{ github.event.inputs.deploy_target || 'production' }}"
        
        # Here you would add actual deployment steps
        # This could include uploading to a documentation site,
        # updating a wiki, or syncing with other systems
        
        echo "✅ Deployment completed successfully"