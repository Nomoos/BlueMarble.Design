name: Content Quality Check

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  content-quality:
    name: Content Quality Analysis
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install content analysis tools
      shell: bash
      run: |
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        # Install PyYAML using detected Python command
        $python_cmd -m pip install PyYAML
        
    - name: Analyze changed files
      shell: bash
      run: |
        echo "Analyzing changed files in this PR..."
        set -e  # Exit on error
        
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        # Get list of changed files in a cross-platform way
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt || echo "Warning: Could not get changed files"
        else
          git diff --name-only HEAD~1 HEAD > changed_files.txt || echo "Warning: Could not get changed files"
        fi
        
        if [ -s changed_files.txt ]; then
          echo "Changed files:"
          cat changed_files.txt
          
          echo "Analyzing files with Python..."
          $python_cmd << 'EOF'
import os

try:
    with open('changed_files.txt', 'r') as f:
        files = [l.strip() for l in f if l.strip()]
except FileNotFoundError:
    print("No changed files to analyze")
    exit(0)

md_files = [f for f in files if f.endswith('.md') and os.path.exists(f)]
if md_files:
    for f in md_files:
        try:
            size = os.path.getsize(f)
            print(f'Analyzing: {f} ({size} bytes)')
        except Exception as e:
            print(f'Warning: Could not analyze {f}: {e}')
    print(f'✓ Analyzed {len(md_files)} markdown files')
else:
    print('No markdown files in changes')
EOF
        else
          echo "No changed files found"
        fi
        
    - name: Validate YAML files
      shell: bash
      run: |
        echo "Validating YAML files..."
        set -e  # Exit on error
        
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        echo "Checking YAML files with Python..."
        $python_cmd << 'EOF'
import os
import sys

try:
    import yaml
except ImportError:
    print("Warning: PyYAML not installed, skipping YAML validation")
    sys.exit(0)

try:
    with open('changed_files.txt', 'r') as f:
        files = [l.strip() for l in f if l.strip()]
except FileNotFoundError:
    print("No changed files to validate")
    sys.exit(0)

yaml_files = [f for f in files if f.endswith(('.yml', '.yaml')) and os.path.exists(f)]
if not yaml_files:
    print('No YAML files in changes')
    sys.exit(0)

errors = []
for f in yaml_files:
    try:
        with open(f, 'r', encoding='utf-8') as file:
            yaml.safe_load(file)
        print(f'✓ Valid YAML: {f}')
    except yaml.YAMLError as e:
        errors.append(f'✗ Invalid YAML in {f}: {e}')
        print(f'✗ Invalid YAML in {f}: {e}')
    except Exception as e:
        errors.append(f'✗ Error reading {f}: {e}')
        print(f'✗ Error reading {f}: {e}')

if errors:
    print(f"\n❌ YAML validation failed with {len(errors)} error(s)")
    sys.exit(1)
else:
    print(f"✓ All {len(yaml_files)} YAML files validated successfully")
EOF
        
        echo "✓ YAML validation completed"
        
    - name: Check for sensitive information
      shell: bash
      run: |
        echo "Checking for potential sensitive information..."
        set -e  # Exit on error
        
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        echo "Scanning for sensitive patterns..."
        $python_cmd << 'EOF'
import os
import re

# Pattern to detect potential sensitive data
pattern = re.compile(r'(password|secret|key|token|api[_-]?key)', re.IGNORECASE)
found_sensitive = False

for root, dirs, files in os.walk('.'):
    # Skip .git directory
    if '/.git/' in root.replace(os.sep, '/'):
        continue
    
    # Filter out hidden directories from further traversal
    dirs[:] = [d for d in dirs if not d.startswith('.')]
    
    for file in files:
        # Check only relevant file types
        if not any(file.endswith(ext) for ext in ['.md', '.yml', '.yaml', '.txt', '.json']):
            continue
        
        filepath = os.path.join(root, file)
        try:
            with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                for line_num, line in enumerate(f, 1):
                    # Skip comment lines and example sections
                    if line.strip().startswith('#') or line.strip().startswith('//'):
                        continue
                    
                    if pattern.search(line):
                        # Check if it's in a code block or example
                        if '```' not in line and 'example' not in line.lower():
                            print(f'⚠ Potential sensitive data in: {filepath}:{line_num}')
                            found_sensitive = True
        except Exception as e:
            print(f'Warning: Could not read {filepath}: {e}')

if not found_sensitive:
    print('✓ No sensitive patterns found')
EOF
        
        echo "✓ Sensitive information check completed"