name: Content Quality Check

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  content-quality:
    name: Content Quality Analysis
    runs-on: self-hosted
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.x'
        
    - name: Install content analysis tools
      shell: bash
      run: |
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        # Install PyYAML using detected Python command
        $python_cmd -m pip install PyYAML
        
    - name: Analyze changed files
      shell: bash
      run: |
        echo "Analyzing changed files in this PR..."
        
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        # Get list of changed files in a cross-platform way
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
        else
          git diff --name-only HEAD~1 HEAD > changed_files.txt
        fi
        
        echo "Changed files:"
        cat changed_files.txt
        
        echo "Analyzing files with Python..."
        $python_cmd -c "import os,re; files=[l.strip() for l in open('changed_files.txt','r') if l.strip()]; md_files=[f for f in files if f.endswith('.md')]; [print(f'Analyzing: {f} ({os.path.getsize(f)} bytes)') if os.path.exists(f) else None for f in md_files]; print(f'Analyzed {len(md_files)} markdown files')"
        
    - name: Validate YAML files
      shell: bash
      run: |
        echo "Validating YAML files..."
        
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        echo "Checking YAML files with Python..."
        $python_cmd -c "import os,yaml; files=[l.strip() for l in open('changed_files.txt','r') if l.strip()]; yaml_files=[f for f in files if f.endswith(('.yml','.yaml'))]; [print(f'✓ Valid YAML: {f}') if yaml.safe_load(open(f,'r',encoding='utf-8')) or True else print(f'✗ Invalid: {f}') for f in yaml_files if os.path.exists(f)] if yaml_files else print('No YAML files in changes')"
        echo "YAML validation completed"
        
    - name: Check for sensitive information
      shell: bash
      run: |
        echo "Checking for potential sensitive information..."
        
        # Detect available Python command
        python_cmd="python3"
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v python >/dev/null 2>&1; then
            python_cmd="python"
          else
            echo "Error: Python not found"
            exit 1
          fi
        fi
        
        echo "Scanning for sensitive patterns..."
        $python_cmd -c "import os,re; pattern=re.compile(r'(password|secret|key|token|api[_-]?key)',re.IGNORECASE); found=False; [print(f'Potential sensitive data in: {os.path.join(root,file)}') or True for root,dirs,files in os.walk('.') if '/.git/' not in root.replace(os.sep,'/') for file in files if any(file.endswith(ext) for ext in ['.md','.yml','.yaml','.txt','.json']) for line_num,line in enumerate(open(os.path.join(root,file),'r',encoding='utf-8',errors='ignore'),1) if pattern.search(line) and not (found := True) and line_num <= 3]; print('No sensitive patterns found') if not found else None"
        echo "Sensitive information check completed"