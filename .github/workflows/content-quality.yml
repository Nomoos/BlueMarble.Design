name: Content Quality Check

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  content-quality:
    name: Content Quality Analysis
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install content analysis tools
      run: |
        pip install PyYAML
        
    - name: Analyze changed files
      shell: bash
      run: |
        echo "Analyzing changed files in this PR..."
        
        # Get list of changed files in a cross-platform way
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
        else
          git diff --name-only HEAD~1 HEAD > changed_files.txt
        fi
        
        echo "Changed files:"
        cat changed_files.txt
        
        # Analyze markdown files for basic quality
        if command -v grep >/dev/null 2>&1; then
          grep "\.md$" changed_files.txt | while read file; do
            if [ -f "$file" ]; then
              echo "Analyzing: $file"
              
              # Check file size (warn if very small or very large)
              if command -v wc >/dev/null 2>&1; then
                size=$(wc -c < "$file")
              else
                # Windows PowerShell compatible file size check
                size=$(python3 -c "import os; print(os.path.getsize('$file'))")
              fi
              
              if [ "$size" -lt 100 ]; then
                echo "Warning: $file is very small ($size bytes)"
              elif [ "$size" -gt 50000 ]; then
                echo "Warning: $file is very large ($size bytes) - consider splitting"
              fi
              
              # Check for basic content structure
              if ! grep -q "^#" "$file" 2>/dev/null; then
                echo "Warning: $file has no headers"
              fi
              
              # Check for TODO/FIXME comments
              if grep -q "TODO\|FIXME\|XXX" "$file" 2>/dev/null; then
                echo "Info: $file contains TODO/FIXME comments"
                grep -n "TODO\|FIXME\|XXX" "$file" 2>/dev/null || true
              fi
            fi
          done
        else
          echo "Grep command not available, using Python for analysis"
          python3 -c "
import os
with open('changed_files.txt', 'r') as f:
    files = [line.strip() for line in f if line.strip().endswith('.md')]
for file in files:
    if os.path.exists(file):
        print(f'Analyzing: {file}')
        size = os.path.getsize(file)
        if size < 100:
            print(f'Warning: {file} is very small ({size} bytes)')
        elif size > 50000:
            print(f'Warning: {file} is very large ({size} bytes) - consider splitting')
"
        fi
        
        echo "Content quality analysis completed"
        
    - name: Validate YAML files
      shell: bash
      run: |
        echo "Validating YAML files..."
        
        if command -v grep >/dev/null 2>&1; then
          grep "\.ya?ml$" changed_files.txt | while read file; do
            if [ -f "$file" ]; then
              echo "Validating YAML: $file"
              python3 -c "import yaml; yaml.safe_load(open('$file')); print('✓ Valid YAML: $file')" || echo "✗ YAML validation failed for $file"
            fi
          done
        else
          echo "Using Python for YAML file detection and validation"
          python3 -c "
import os
import yaml
with open('changed_files.txt', 'r') as f:
    files = [line.strip() for line in f if line.strip().endswith(('.yml', '.yaml'))]
for file in files:
    if os.path.exists(file):
        print(f'Validating YAML: {file}')
        try:
            with open(file, 'r') as f:
                yaml.safe_load(f)
            print(f'✓ Valid YAML: {file}')
        except Exception as e:
            print(f'✗ YAML validation failed for {file}: {e}')
"
        fi
        
        echo "YAML validation completed"
        
    - name: Check for sensitive information
      shell: bash
      run: |
        echo "Checking for potential sensitive information..."
        
        # Check for common patterns that might indicate sensitive data
        # Use cross-platform approach
        if command -v grep >/dev/null 2>&1; then
          grep -r -i --include="*.md" --include="*.yml" --include="*.yaml" \
            -E "(password|secret|key|token|api[_-]?key)" . 2>/dev/null || echo "No sensitive patterns found"
        else
          echo "Using Python for sensitive information detection"
          python3 -c "
import os
import re
import glob

sensitive_pattern = re.compile(r'(password|secret|key|token|api[_-]?key)', re.IGNORECASE)
found_sensitive = False

for pattern in ['**/*.md', '**/*.yml', '**/*.yaml']:
    for file in glob.glob(pattern, recursive=True):
        if os.path.isfile(file):
            try:
                with open(file, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                    if sensitive_pattern.search(content):
                        print(f'Potential sensitive data found in: {file}')
                        found_sensitive = True
            except Exception:
                continue

if not found_sensitive:
    print('No sensitive patterns found')
"
        fi
          
        echo "Sensitive information check completed"